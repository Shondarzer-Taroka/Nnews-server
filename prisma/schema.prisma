// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// prisma/schema.prisma
// model User {
//   id        String   @id @default(uuid())
//   name      String
//   email     String   @unique
//   password  String
//   phone     String
//   address   String
//   division  String
//   district  String
//   thana     String
//   union     String
//   postCode  String
//   image     String?
//   role      String   @default("user")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // Relations
//   news    News[]   @relation("UserNews")
//   polls   Poll[]
//   epapers EPaper[]

//   opinions Opinion[] @relation("UserOpinions")

//   Comment Comment[]

//   Like Like[]
// }

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String
  address   String
  division  String
  district  String
  thana     String
  union     String
  postCode  String
  image     String?
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  news    News[]   @relation("UserNews")
  polls   Poll[]
  epapers EPaper[]
  opinions Opinion[] @relation("UserOpinions")
  Comment Comment[]
  Like Like[]
}

// model News {
//   id          String   @id @default(uuid())
//   title       String
//   content     String
//   category    String
//   subCategory String
//   imageSource String   @default("Unknown")
//   imageTitle  String   @default("Untitled")
//   keywords    String[]
//   subKeywords String[]
//   imageUrl    String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   authorId String
//   author   User   @relation("UserNews", fields: [authorId], references: [id])
// }


model News {
  id          String   @id @default(uuid())
  title       String
  content     String
  category    String
  subCategory String
  imageSource String   @default("Unknown")
  imageTitle  String   @default("Untitled")
  keywords    String[]
  subKeywords String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  views       Int      @default(0) // for views this line

  authorId String
  author   User   @relation("UserNews", fields: [authorId], references: [id])
}


model Poll {
  id        String       @id @default(uuid())
  question  String
  endDate   DateTime     @default(now())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  options   PollOption[]
}

model PollOption {
  id     String @id @default(uuid())
  text   String
  poll   Poll   @relation(fields: [pollId], references: [id])
  pollId String
  votes  Vote[]
}

model Vote {
  id        String     @id @default(uuid())
  option    PollOption @relation(fields: [optionId], references: [id])
  optionId  String
  voterId   String // Unique identifier for the voter (can be IP, device ID, etc.)
  createdAt DateTime   @default(now())
}

model EPaper {
  id              Int       @id @default(autoincrement())
  mainEpaperImage String
  date            DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  articles        Article[]

  @@index([date])
  @@index([userId])
}

model Article {
  id           Int      @id @default(autoincrement())
  title        String
  contentImage String
  content      String
  bboxX        Float
  bboxY        Float
  bboxWidth    Float
  bboxHeight   Float
  category     String
  isLeading    Boolean  @default(false)
  pageNumber   Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  epaperId     Int
  epaper       EPaper   @relation(fields: [epaperId], references: [id])

  @@index([epaperId])
  @@index([category])
  @@index([isLeading])
}


model Opinion {
  id          String   @id @default(uuid())
  title       String
  content     String
  category    String
  subCategory String
  imageSource String   @default("Unknown")
  imageTitle  String   @default("Untitled")
  keywords    String[]
  subKeywords String[]
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId String
  author   User   @relation("UserOpinions", fields: [authorId], references: [id])

  Comment Comment[]

  Like Like[]
}









model Like {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  opinionId String
  opinion   Opinion  @relation(fields: [opinionId], references: [id])
  createdAt DateTime @default(now())
  userIp    String?

  @@unique([userId, opinionId], name: "userId_opinionId")
  @@unique([userIp, opinionId], name: "userIp_opinionId")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  opinionId String
  opinion   Opinion  @relation(fields: [opinionId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
